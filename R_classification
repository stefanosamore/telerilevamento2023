# CLASSIFICAZIONE dei dati di telerilevamento tramite RSToolbox
# Pacchetti
library(raster)
library(RStoolbox)

setwd("/Users/stefanosamore/desktop/lab")  # setting working directory

# Uso la Funzione Brick per file stratificati, raster per immagini con un solo livello.

sun <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")
# Plot dell'immagine
plotRGB(sun, 1, 2, 3, stretch = "lin")
plotRGB(sun, 1, 2, 3, stretch = "hist")
sun

- Get values
single_nr <- getValues(sun)
single_nr
# restituisce tutti i valori di un numero di righe di un oggetto Raster

- Classify
k_cluster <- kmeans(single_nr, centers = 3) # centers = numero di classes/clusters
k_cluster

- Set values to a raster on the basis of the sun image
sun_class <- setValues(sun[[1]], k_cluster$cluster) # assign new values to a raster object

cl <- colorRampPalette(c("yellow", "black", "red"))(100)
plot(sun_class, col = cl)

# class 1: highest energy level
# class 2: medium energy level
# class 3: lowest energy level

# Calcola le frequenze dei pixel nei cluster
frequencies <- freq(sun_class)
frequencies
tot <- ncell(sun_class)
tot
percentages <- round((frequencies*100)/tot, digits = 5)
percentages  

# GRAND CANYON 
#https://landsat.visibleearth.nasa.gov/view.php?id=80948

gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")

# Plot RGB (con stretch lineare o a istogrammi) - # red = 1 green = 2 blue = 3
plotRGB(gc, r=1, g=2, b=3, stretch="lin")
plotRGB(gc, r=1, g=2, b=3, stretch="hist")

# Change the stretch to histogram stretching
plotRGB(grand_canyon, 1, 2, 3, stretch = "hist")

# Croppiamo l'immagine che risulta troppo grande
gc_crop <- crop(grand_canyon, drawExtent())
plotRGB(gc_crop, 1, 2, 3, stretch = "lin")

ncell(grand_canyon)   # numero di pixel della foto originale 
ncell(gc_crop)   # numero di pixel della foto croppata

# Classificazione immagine in 2 classi
gcc2 <- unsuperClass(gc, nClasses=2)
gcc2
plot(gcc2$map)

# Classificazione immagine in 4 classi
gcc4 <- unsuperClass(gc, nClasses=4)
plot(gcc4$map)



# Esercizio: classifocare la mappa in 4 classi
singlenr_2 <- getValues(gc_crop)
singlenr_2

kcluster_2 <- kmeans(singlenr_2, centers = 4)
kcluster_2

gcclass_2 <- setValues(gc_crop[[1]], kcluster_2$cluster)

cl <- colorRampPalette(c('yellow','black','red', 'blue'))(100)
plot(gcclass_2, col=cl)

frequencies <- freq(gcclass_2)
frequencies
tot <- ncell(gcclass_2)
percentages = frequencies * 100 /  tot
percentages


