# CLASSIFICAZIONE dei dati di telerilevamento tramite RSToolbox
# Pacchetti
library(raster)
library(RStoolbox)

setwd("/Users/stefanosamore/desktop/lab")  # setting working directory

# Uso la Funzione Brick per file stratificati, raster per immagini con un solo livello.

sun <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")
# Plot dell'immagine
plotRGB(sun, 1, 2, 3, stretch = "lin")
plotRGB(sun, 1, 2, 3, stretch = "hist")
sun

# Get values
single_nr <- getValues(sun)
single_nr
# restituisce tutti i valori di un numero di righe di un oggetto Raster

# Classify
k_cluster <- kmeans(single_nr, centers = 3) # centers = numero di classes/clusters
k_cluster

# Set values to a raster on the basis of the sun image
sun_class <- setValues(sun[[1]], k_cluster$cluster) # assign new values to a raster object

cl <- colorRampPalette(c("yellow", "black", "red"))(100)
plot(sun_class, col = cl)

# class 1: highest energy level
# class 2: medium energy level
# class 3: lowest energy level

# Calcola le frequenze dei pixel nei cluster
frequencies <- freq(sun_class)
frequencies
tot <- ncell(sun_class)
tot
percentages <- round((frequencies*100)/tot, digits = 5)
percentages  



# GRAND CANYON 
#https://landsat.visibleearth.nasa.gov/view.php?id=80948
library(raster)
#install.packages("devtools")
#library (RStoolBox)
#installing devtools
#install.packages("devtools")
#install_github("bleutner/RStoolbox")

#per Mac
setwd("/Users/stefanosamore/desktop/lab")
brick("dolansprings_oli_2013088_canyon_lrg.jpg")


brick("dolansprings_oli_2013088_canyon_lrg.jpeg")

gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")
gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpeg")
gc

# Plot RGB (con stretch lineare o a istogrammi) 
# 3 layer del visibile 
# Red = 1
# Green = 2
# Blu = 3
## Plot RGB dell'immagine (stretch lineare)
plotRGB(gc, r=1, g=2, b=3, stretch="lin") 
## Plot RGB dell'immagine (stretch a istogrammi)
plotRGB(gc, r=1, g=2, b=3, stretch="hist")


#Croppiamo l'iimagine che risulta essere troppo grande
crop(gc, drawExtent())
gcc<-crop(gc, drawExtent())
gcc<-crop(gc, drawExtent())

plotRGB(gcc, 1, 2, 3, stretch = "lin")

ncell(grand_canyon)   # numero di pixel della foto originale 
ncell(gc_crop)   # numero di pixel della foto croppata

# CLASSIFICAZIONE (Grand Canyon): discriminazioni di diversi tipi mineralogici nella stessa roccia

# Importazione del dato
gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")
gc
# L'immagine Ã¨ a 8 bit - 0->255
# Rosso = 1
# Verde = 2
# Blu = 3

# Plot RGB dell'immagine (stretch lineare)
plotRGB(gc, r=1, g=2, b=3, stretch="lin")

# Plot RGB dell'immagine (stretch lineare)
plotRGB(gc, r=1, g=2, b=3, stretch="hist") # aumenta il contrasto 

# Classificazione
# l'immagine da classificare, il numero di classi, il numero di px campione 
gcclass2 <- unsuperClass (gc, nClasses=2)
gcclass2

# Plot dell'immagine in classi
plot(gcclass2$map)
# La classe verde corrisponde alle rocce
# La classe bianca corrisponde all'acqua e ombre 

# Classifichiamo per 4 classi
singlenr_2 <- getValues(gc_crop)
singlenr_2

kcluster_2 <- kmeans(singlenr_2, centers = 4)
kcluster_2

gcclass_2 <- setValues(gc_crop[[1]], kcluster_2$cluster)

# Cambio il colore delle classi
clc <- colorRampPalette(c("yellow", "red", "blue", "black"))(100)
plot(gcclass4$map, col=clc)
# Una classe corrisponde alle nuvole e alle sabbie
# Una classe classe corrisponde all'acqua e le ombre 
# Altre due classi rappresentano determinate composizioni mineralogiche

# Visualizzazione della rappresentazione in 4 classi
par(mfrow=c(2,1))
plot(gcclass4$map, col=clc)
plotRGB(gc, r=1, g=2, b=3, stretch="hist")


frequencies <- freq(gcclass_2)
frequencies
tot <- ncell(gcclass_2)
percentages = frequencies * 100 /  tot
percentages


# Exercise: classify the map with 4 classes
singlenr_2 <- getValues(gc_crop)
singlenr_2

kcluster_2 <- kmeans(singlenr_2, centers = 4)
kcluster_2

gcclass_2 <- setValues(gc_crop[[1]], kcluster_2$cluster)

cl <- colorRampPalette(c('yellow','black','red', 'blue'))(100)
plot(gcclass_2, col=cl)

frequencies <- freq(gcclass_2)
frequencies
tot <- ncell(gcclass_2)
percentages = frequencies * 100 /  tot
percentages
